#!/bin/bash
# OpenWRT compilation script
# (C) 2018-2020 CZ.NIC, z.s.p.o.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
set -e
shopt -s nullglob

# Step list that is run when no commands are specified
DEFAULT_STEPS=( "prepare" "compile" "sign" "store_hash" "stats" "pkgsrepo" "gen_junit" )

# Paths to OpenWRT build and turris-build sources
src_dir="$(readlink -f "${0%/*}")"
build_dir="$(readlink -f "$(pwd)")"
if [ "$build_dir" == "$src_dir" ]; then
	# Protect against turris-build repository wipe
	mkdir -p build
	cd build
	build_dir="$(pwd)"
fi

# Include common utilities
. "$src_dir/helpers/common.sh"

# Sets various variables to match the specified target, just a helper
# It is defined here so it can be used from configuration
set_target() {
	report "Setting target as $1"
	case "$1" in
		omnia)
			TARGET_BOARD=omnia
			TARGET_ARCH=armv7l
			;;
		turris1x)
			TARGET_BOARD=turris1x
			TARGET_ARCH=ppcspe
			;;
		mox)
			TARGET_BOARD=mox
			TARGET_ARCH=aarch64
			;;
		atlas)
			TARGET_BOARD=atlas
			TARGET_ARCH=aarch64
            ;;
		*)
			echo "Invalid target board!!! Use -t [turris1x|omnia|mox]!!!"
			exit 1
			;;
	esac
}

# Get OpenWRT URL and branch from feeds.conf file
openwrt_feed() {
	# OpenWRT git repository URL
	OPENWRT_URL="$(sed -n 's/# openwrt \([^;^]\+\).*/\1/p' "$src_dir/feeds.conf")"
	# Git reference used to checkout OpenWRT repository
	OPENWRT_BRANCH="$(sed -n 's/# openwrt [^;^]\+[;^]\([^[:blank:]]\+\).*/\1/p' "$src_dir/feeds.conf")"
	# Check if ^ is used to separate URL and branch and in such case it is hash not branch
	grep -E '^# openwrt [^;^]+\^.+' "$src_dir/feeds.conf" && OPENWRT_BRANCH="#$OPENWRT_BRANCH"
	[ -n "$OPENWRT_BRANCH" ] || OPENWRT_BRANCH="master"
}

# Configuration variables
. "$src_dir/defaults.sh"
FORCE="" # Force build
CLONE_DEEP="" # Set this variable to clone OpenWRT tree in full depth not just latest commit
BUILD_ARGS=() # Additional arguments passed to OpenWRT make call (note that this is for all make calls in OpenWRT)
BUILD_JOBS="$(nproc)" # Number of jobs to be passed to make calls
SIGN_KEY="" # Path to private signing key
GIT_MIRROR="" # Path to git mirror directory
DL_MIRROR="" # Path to downloads mirror directory
CCACHE_HOST_DIR="" # Path to ccache directory for host compilations
CCACHE_TARGET_DIR="" # Path to ccache directory for target compilations
OUTPUT_DIR="./pkgsrepo" # Output directory for pkgsrepo command
openwrt_feed

# Load configurations
[ -f "${src_dir}"/turris-build.conf ] && . "${src_dir}"/turris-build.conf
[ -f ~/.turris-build ] && . ~/.turris-build
[ -f ./turris-build.conf ] && . ./turris-build.conf

##################################################################################

# Technical variables
declare -A available_commands # Set of all commands defined in this script
mirror_updated="" # Variable signaling that mirrors were update in this run already
debug="" # set when debug on executed scripts should be enabled

# OpenWRT directory for temporally data
export TMPDIR="${build_dir}/tmp"
mkdir -p "$TMPDIR"

# Git that should be used for commands such as: git commit or git am
_git() {
	git \
		-c "commit.gpgsign=false" \
		-c "user.email=auto-build@example.com" \
		-c "user.name=Build system automate" \
		"$@"
}

_sh() {
	sh ${debug:+-x} "$@"
}

_perl() {
	perl ${debug:+-d:Trace} "$@"
}

_make() {
	make ${debug:+-d} "$@"
}

# Make for OpenWRT
_openwrt_make() {
	local mk
	if [ -z "$FORCE" ]; then
		mk=("make" -j "$BUILD_JOBS")
	else
		mk=("$src_dir/helpers/force-make" "-j" "$BUILD_JOBS" "-c" "$FORCE" "-f" "V=s" "--")
	fi

	"${mk[@]}" ${debug:+-d} \
		"IGNORE_ERRORS=m" "BUILD_LOG=1" ${debug:+V=s} "${BUILD_ARGS[@]}" \
		"$@"
}

# Definition of avaliable commands ###############################################

available_commands+=( ["gen_version"]="Generates Turris version package from NEWS" )
gen_version() {
	report "Generating turris-version package"
	"${src_dir}/helpers/turris-version.sh" --output "${build_dir}/package/system/turris-version" package
	pushd "${build_dir}"
	git add "${build_dir}/package/system/turris-version"
	_git commit -m 'turris-version: Create a package with release notes'
	popd
}

available_commands+=( ["conflicts"]="Show packages that we are overriding in Turris OS packages" )
conflicts() {
	report "Showing conflicting packages"
	echo "Following packages are being overridden by Turris packages:"
	echo
	mkdir -p tmp
	find feeds/turrispackages -name Makefile | sed 's|.*/\([^/]*\)/Makefile|\1|' | sort > tmp/turris-packages.list
	find feeds/ -name Makefile | grep -v '^feeds/turrispackages' | sed 's|.*/\([^/]*\)/Makefile|\1|' | sort > tmp/other-packages.list
	comm -12 tmp/turris-packages.list tmp/other-packages.list | sed 's|^| * |'
	echo
	rm -f tmp/turris-packages.list tmp/other-packages.list
}

available_commands+=( ["stats"]="	Prints statistics regarding number of built packages" )
stats() {
	mkdir -p logs
	report "Reporting statistics"
	local binpackages=0 failed=0 packages=0
	if [ -d "bin" ]; then
		binpackages="$(find bin -name '*.ipk' | wc -l)"
	fi
	if [ -f "logs/package/error.txt" ]; then
		failed="$(wc -l < logs/package/error.txt)"
		packages="$(find logs/package -name 'compile.txt' | wc -l)"
	fi
	tee logs/stats <<-EOF
		Statistics of the build:

		 * $binpackages binary packages built"
		 * $failed/$packages source packages failed"
	EOF
}

available_commands+=( ["configure"]="Recreates configuration for target boards" )
configure() {
	report "Creating default configuration"
	[ -n "${TARGET_BOARD}" ] || die "No board selected!"
	cat "${src_dir}"/configs/common/* "${src_dir}/configs/${TARGET_BOARD}"/* > ./.config
	{
		[ -n "$DL_MIRROR" ] && echo "CONFIG_DOWNLOAD_FOLDER=$DL_MIRROR"
		echo "CONFIG_VERSION_REPO=\"https://repo.turris.cz/$PUBLISH_BRANCH/$TARGET_BOARD/packages\""
		echo "CONFIG_VERSION_NUMBER=\"$("${src_dir}/helpers/turris-version.sh" version)\""
		echo "CONFIG_VERSION_CODE=\"$(_git_remote_hash)\""
	} >> .config
	_make defconfig diffconfig

	# Verify config
	for config in "${src_dir}/configs/common"/* "${src_dir}/configs/${TARGET_BOARD}"/*; do
		 while IFS="=" read -r name value; do
			 [ -z "$value" ] && continue
			 [ "${value:0:1}" = "#" ] && continue
			 if [ "$value" = "n" ]; then
				 # No options can be ommited in the result so instead check it
				 # they are not enabled by any chance.
				 if grep -qE "^$name=y" ./.config; then
					 die "Config option that is forced to 'n' is set to 'y': $name=$value"
				 fi
			else
				 if ! grep -qE "^$name=$value$" ./.config; then
					 die "Config option is not present in generated config: $name=$value"
				 fi
			 fi
		done < "$config"
	done
}

available_commands+=( ["update_mirror"]="Updates all local mirrors" )
update_mirror() {
	[ -n "$GIT_MIRROR" ] || return 0
	[ -d "$GIT_MIRROR" ] || return 0
	[ -z "$mirror_updated" ] || return 0

	report "Updating local mirrors"
	flock --exclusive "$GIT_MIRROR" "$SHELL" -s "$GIT_MIRROR" <<"EOF"
		cd "$1"
		for mirror in ./*; do
			[ -d "$mirror" ] || continue
			cd "$mirror"
			git remote update --prune
			cd "$1"
		done
EOF
	mirror_updated="yes"
}

available_commands+=( ["checkout"]="Start everything from scratch - all changes deleted and fresh copy of OpenWRT gets checked out" )
checkout() {
	local target="${OPENWRT_BRANCH#\#}"
	report "Starting out: $target"

	report "Checking out OpenWRT repository"
	update_mirror
	if [ -n "$GIT_MIRROR" ]; then
		mkdir -p "$GIT_MIRROR"
		[ -d "$GIT_MIRROR/openwrt" ] || \
			git clone --mirror "$OPENWRT_URL" "$GIT_MIRROR/openwrt"
		OPENWRT_URL="$GIT_MIRROR/openwrt"
	fi
	rm -rf .git
	git init
	git remote add origin "$OPENWRT_URL"
	if [ -z "$GIT_MIRROR" -a "${OPENWRT_BRANCH:0:1}" = "#" ]; then
		# If we are downloading directly from server we can't fetch specific
		# commit so fetch everything
		git fetch origin
		git checkout -f "$target"
	else
		git fetch ${CLONE_DEEP+--depth 1} origin "$target"
		git checkout -f FETCH_HEAD
	fi

	git clean -dff -e '/turris-build.conf'
	find . -name '*.rej' -delete

	git rev-parse --short HEAD > version
	echo "/turris-build.conf" >> ./.gitignore
	echo "/version" >> ./.gitignore
	_git commit -m 'gitignore: Ignore some more files' ./.gitignore

	cp "$src_dir"/feeds.conf .

	if [ -n "$DL_MIRROR" ]; then
		mkdir -p "$DL_MIRROR"
		rm -rf dl && ln -s "$DL_MIRROR" dl
	fi
}

available_commands+=( ["clean_ccache"]="Clean persistent ccache paths" )
clean_ccache() {
	if [ "$(which ccache)" ]; then
		report "Cleaning ccache"
		[ -z "$CCACHE_HOST_DIR" ]   || CCACHE_DIR="$CCACHE_HOST_DIR"   ccache -C
		[ -z "$CCACHE_TARGET_DIR" ] || CCACHE_DIR="$CCACHE_TARGET_DIR/$TARGET_ARCH" ccache -C
	else
		report "Not cleaning ccache as you don't have ccache installed"
	fi
}

available_commands+=( ["set_ccache"]="Set persistent ccache paths" )
set_ccache() {
	[ -z "$CCACHE_SET" ] || return 0
	report "Setting ccache paths"
	CCACHE_SET=y
	[ -z "$CCACHE_HOST_DIR" ] || sed -i 's|$(STAGING_DIR_HOST)/ccache|'"$CCACHE_HOST_DIR|" include/host-build.mk
	[ -z "$CCACHE_TARGET_DIR" ] || [ -z "$TARGET_ARCH" ] || sed -i 's|$(STAGING_DIR)/ccache|'"$CCACHE_TARGET_DIR/$TARGET_ARCH|" include/package.mk
	[ -z "$(git diff include/host-build.mk include/package.mk)" ] || _git commit -m "include: ccache settings" include/host-build.mk include/package.mk
}

available_commands+=( ["set_local_feeds"]="Change feed URL to their mirror counterparts" )
set_local_feeds() {
	[ -n "$GIT_MIRROR" ] || return 0
	report "Setting feeds to their local counterparts"
	while read -r vcs name url rest; do
		if [ "$vcs" = src-git ] && [ -d "$GIT_MIRROR/$name" ]; then
			local branch=""
			[[ "$url" != *^* ]] || branch="^${url#*^}"
			[[ "$url" != *\;* ]] || branch=";${url#*;}"
			echo "$vcs $name file://$GIT_MIRROR/$name$branch $rest"
		else
			echo "$vcs $name $url $rest"
		fi
	done < feeds.conf > feeds.conf.new
	mv feeds.conf.new feeds.conf
}

available_commands+=( ["mirror_feeds"]="Creates initial mirrors of all configured feeds" )
mirror_feeds() {
	[ -n "$GIT_MIRROR" ] || return 0
	pushd "$GIT_MIRROR" >/dev/null
	cat "$src_dir"/feeds.conf "$build_dir"/feeds.conf 2> /dev/null | while read -r vcs name url rest; do
		if [ "$vcs" = src-git ] && [ ! -d "$GIT_MIRROR/$name" ]; then
			git clone --mirror "${url%[;^]*}" "$name"
		fi
	done
	popd >/dev/null
	update_mirror
}

available_commands+=( ["patch_openwrt"]="Patch the main OpenWRT repository" )
patch_openwrt() {
	report "Patching OpenWRT repository"
	for patch in "$src_dir/patches/openwrt"/*/*.patch; do
		_git am --whitespace=nowarn --reject "$patch"
	done
	if [ -d "$src_dir/src" ]; then
		cp -r "$src_dir"/src/* .
		find "$src_dir"/src -printf "%P\\0" | xargs --null git add
		_git commit -m 'Add additional files'
	fi
}

_git_remote_hash() {
	local dir="${1:-}"
	git -C "$dir" rev-list HEAD | \
		git -C "$dir" name-rev --stdin --refs='origin/*' | \
		awk '$2 != "" { print $1; exit }'
}

available_commands+=( ["store_hash"]="Stores hashes of current build" )
store_hash() {
	report "Storing hashes"
	mkdir -p bin
	{
	echo "Project was build from following repositories:"
	echo
	echo " * turris-build: $(_git_remote_hash "${src_dir}")"
	echo " * openwrt: $(_git_remote_hash "${build_dir}")"
	for feed in feeds/*; do
		[ -d "$feed/.git" ] || continue
		echo " * $feed: $(_git_remote_hash "${feed}")"
	done
	echo
	} | tee bin/git-hash
}

available_commands+=( ["repatch_feeds"]="Cleanup feeds, update them and patch them" )
repatch_feeds() {
	report "Getting feeds"
	update_mirror
	set_local_feeds
	_perl ./scripts/feeds clean -a
	_perl ./scripts/feeds update -a

	report "Patching feeds"
	for feed in "$src_dir"/patches/*; do
		[ -d "$feed" ] || continue
		feed_name="$(basename "$feed")"
		[ -d "$build_dir/feeds/$feed_name" ] || continue
		for patch in "$feed"/*/*.patch; do
			[ -f "$patch" ] || continue
			pushd "$build_dir/feeds/$feed_name" >/dev/null
			_git am --whitespace=nowarn --reject "$patch"
			popd >/dev/null
		done
	done

	report "Installing feeds packages"
	_perl ./scripts/feeds update -a -i
	_perl ./scripts/feeds install -a
}

available_commands+=( ["prefetch"]="Runs make download" )
prefetch() {
	# We do not want to use force here intentionally as we are not building here.
	FORCE="" _openwrt_make download
}

available_commands+=( ["gen_junit"]="Generates junit output from build logs" )
gen_junit() {
	_sh "${src_dir}"/helpers/generate_junit.sh
}

available_commands+=( ["pkgsrepo"]="Extract packages from OpenWRT tree and place them to repository format as they are deployed to Turris servers" )
pkgsrepo() {
	report "Extracting packages to pkgsrepo directory: $OUTPUT_DIR"
	rm -rf "$OUTPUT_DIR"
	mkdir -p "$OUTPUT_DIR"
	mv bin/packages/*/* "$OUTPUT_DIR"
	mv bin/targets/*/*/packages "$OUTPUT_DIR/core"
	mv bin/targets/*/*/config.buildinfo "$OUTPUT_DIR"
	mv bin/git-hash "$OUTPUT_DIR"
}

available_commands+=( ["compile_tools"]="Compile host tools" )
compile_tools() {
	report "Compiling tools"
	_openwrt_make tools/compile toolchain/compile
}

available_commands+=( ["compile_target"]="Compile target specific software (Linux kernel)" )
compile_target() {
	report "Compiling target"
	_openwrt_make target/compile
}

available_commands+=( ["compile_packages"]="Compile packages" )
compile_packages() {
	report "Compiling packages"
	_openwrt_make package/compile
}

available_commands+=( ["compile"]="	Compile tools, target and packages" )
compile() {
	compile_tools
	compile_target
	compile_packages
}

available_commands+=( ["sign"]="	Generate packages index and sign it" )
sign() {
	_openwrt_make package/index BUILD_KEY="$SIGN_KEY"
}

available_commands+=( ["clean"]="	Clean current build directory" )
clean() {
	report "Cleaning up current build directory"
	rm -rf ./build_dir ./tmp ./staging_dir ./logs ./bin
	mkdir -p tmp
}

available_commands+=( ["prepare"]="	Prepare build but don't build it (Implies: checkout clean patch_openwrt repatch_feeds gen_version configure set_ccache)" )
prepare() {
	checkout
	clean
	patch_openwrt
	repatch_feeds
	gen_version
	configure
	set_ccache
}

available_commands+=( ["prepare_tools"]="Prepare build and build tools (Impies: prepare compile_tools compile_target)" )
prepare_tools() {
	prepare
	compile_tools
	compile_target
}

available_commands+=( ["autopkg"]="	Deploy autopkg scripts that can be used for rolling software development" )
autopkg() {
	report "Deploying autopkg scripts"
	cp "$src_dir"/helpers/autopkg/* "$build_dir"/include/
	_git add include/autopkg-*.mk
	_git commit -m 'autopkg: Add autopkg scripts'
}

##################################################################################

print_help() {
	echo "Usage: ${0} [OPTION].. [COMMAND].."
	echo "Compile TurrisOS packages. This script fetches, patches and configures OpenWRT tree."
	echo
	echo "Primary options:"
	echo "	-t BOARD	Set target board to BOARD. This is required for almost all commands."
	echo "	-jNUM		Number of jobs in paralel to be run. In default number of CPUs is used."
	echo "	-a ARG		Add build arguments - passed directly to make. This option can be specified multiple times."
	echo "	-f[NUM]		Try hard to get stuff to compile (optional number specifies number of tries)"
	echo "	-o PATH		Path to output directory where repository is prepared. In default ./pkgsrepo is used."
	echo "	-s KEY		Sign packges with given private key. Key has to be generated using using tool."
	echo "	-h, --help	Show this help text"
	echo
	echo "Advanced options:"
	echo "	-p BRANCH	Name of the target build alias. This is used to set OPKG feeds. If not specified '$PUBLISH_BRANCH' is used."
	echo "	-l		Do not update local git mirrors. Use them as they are to fetch OpenWRT and its feeds."
	echo "	-d		Do not use shallow checkouts"
	echo "	-x		Enable debug mode"
	echo
	echo "Available commands are:"
	for cmd in "${!available_commands[@]}"; do
		echo "	$cmd	${available_commands[$cmd]}"
	done
	echo
	echo "Default commands are: ${DEFAULT_STEPS[*]}"
}

steps=()
# Parse arguments
while [ $# -gt 0 ]; do
	case "$1" in
		-e)
			echo "-e option is obsoleted and execution now always runs as with this option." >&2
			;;
		-j*)
			BUILD_JOBS="${1#-j}"
			;;
		-f*)
			FORCE="${1#-f}"
			[ -n "$FORCE" ] || FORCE="1"
			;;
		-t)
			shift
			set_target "$1"
			;;
		-a)
			shift
			BUILD_ARGS+=( "$1" )
			;;
		-p)
			shift
			PUBLISH_BRANCH="$1"
			;;
		-l)
			mirror_updated="override"
			OPENWRT_URL="$GIT_MIRROR/openwrt"
			;;
		-o)
			shift
			OUTPUT_DIR="$1"
			;;
		-s)
			shift
			SIGN_KEY="$1"
			;;
		-d)
			CLONE_DEEP="y"
			;;
		-x)
			debug="y"
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			[ -n "${available_commands[$1]}" ] || \
				die "There is no such option or command: $1"
			steps+=( "$1" )
			;;
	esac
	shift
done

[ "$(id -u)" != 0 ] || die "Build should not be run under root!"

[ ${#steps[@]} -gt 0 ] || steps=( "${DEFAULT_STEPS[@]}" )
for step in "${steps[@]}"; do
	"$step"
done
